Combat.ActorGoFront(currentData.characterID);

                    switch (currentData.characterAction)
                    {
                        case ActionType.Idle:
                            Combat.ActorGoBack(currentData.characterID);
                            Combat.Done();
                            RemoveFirstData();
                            break;
                        case ActionType.ChargeOrSpelling:
                            Combat.DoSpellingOrCharging(currentData.characterID);
                            Combat.Done();
                            RemoveFirstData();
                            break;
                        case ActionType.CastSkill:
                            Combat.CastSpell(currentData.characterID, currentData.skillId);
                            
                            foreach(ServerSkillResult tempResult in currentData.results)
                            {
                                if (tempResult.isDefend)
                                {
                                    Combat.ProtectorGoFront(tempResult.targetId);
                                }
                            }

                            foreach (ServerSkillResult tempResult in currentData.results)
                            {
                                Combat.ShowSkillResult(tempResult);
                            }
                            Combat.DefendersGoBack();
                            Combat.ActorGoBack(currentData.characterID);
                            Combat.Done();
                            RemoveFirstData();
                            break;
                        default:
                            Console.WriteLine("额...");
                            break;
                    }
                }


				-------------
		class ServerDataForTurn
        {
            internal int characterID;//谁行动
            internal ServerSkillResult[] results;//影响谁
            internal int skillId;
            //internal SkillEffect skillEffect;
            internal ActionType characterAction;
        }


		class－ClientSkill
		{
			int guid;
			string name;
			enmu castingType=瞬间/持续
			effectType=全屏黑|pos
			float delay;
			float interval;
			privite List<ClientSkillEffect> currentEffects;
			public ClientSkillEffectData[] effectDatas;
			void Update()
			{
				//delay 0s
				//全屏黑 <-loop
				//delay 1s
				//右屏风暴 <-loop
				//delay 1.5s
				//A受伤+call数字 <-once
				//delay 1.7s
				//B受伤+call数字 <-once
				//delay 1.9s
				//C受伤+call数字 <-once
				//delay 2.1s
				//A受伤+call数字+call死亡 <-once
				//delay 2.3s
				//B受伤+call数字 <-once
				//delay 2.8s
				//风暴结束
				//delay 2.8s
				//黑屏结束
				//技能结束
			}

			class ClientSkillEffect
			{
				bool isLoop;
				bool isFinished;
				Animation ani;
			}

			class CommonSkillEffectManager
			{
				BattleFields battlefield;
				void CallText(Color color,string text, int castingBattleFieldPos,int characterPos);
			}

			class ClientSkillEffectData
			{
				float startDelay;
				ClientSkillEffect skillEffect;
				int castingBattleFieldPos;//1~20：对应20个位置；21：全屏中；22：全屏左；23：全屏右
				int sortinglayer;
			}
		}

		－Resource/Prefab/Prefab_Skill/


		第一.要方便地得到战场的各位置、各角色的当前位置，以及角色的各身体位置
		第二.要设计一个Skill各阶段的关联关系
		第三.要实现对动画的播放控制与监视


		较复杂的情况（考虑到反击/护盾/miss等情况）
		{
			cast skill=9301;interval = 0.2s;startTime = 1.0s;
			result...
			{
				1.0s：
				enemy1= damage,damage  =15;
				me=cure,cure = 10;
				damageEffect-enemy1;
				cureEffect-me;

				1.2s：
				enemy2=shield;damage=0;				
				me=cure,cure=0;
				shieldEffect-enemy2;
				cureEffect-me;

				1.4s:
				enemy3=miss;damage=miss;

				1.6s:
				enemy4=conterAttack;
				enemy4=damage,damage=12;
				me=cure,cure=8;
				damageEffect-enemy1;
				cureEffect-me;

				conterAttackEffect-enemy1
				conterAttackEffect2=me
				me=damage,0

			}

			//总结如下：
			服务端传来的数据：
			1.效果类型码
			2.参数
			这个数据是针对技能生效的，只要结算一次就传来一个数据。
			前端根据数据来分配和指定对应的特效

			ClientSkill本身有自己的特效(ClientSkillEffect)
			ClientSkill收到这个类型码之后，根据预先设定好的xx来同时播放自身特效和对应的通用特效
			考虑在ClientSkillEffect(?)中用个工厂模式来处理各种类型码

			AnimationObject和ClientSkillEffect是不同的东西
		}

		class clientSkill
		{
			List<Effect> allEffect;
			abstract void CreateEffectForRequest();
			abstract void TryToDestroy(); 
		}

		class IProcedure
		{

		}

		classs normalSkill
		{

		}

		class lastingSkill
		{
		List<Effect> castingEffectForWaiting;
		List<Effect> allTargets;
		}

		蓄力集气效果，原始效果挂到GlobalEffectManager上面
		然后clone对象交给character管理，character死亡、放技能、被打断时摧毁此对象

		buff类特效，指角色行动时、技能前所出现的特效，比如持续回血、回蓝，补充盾、毒生效等
		buff这边，为了维护起来方便...还是写成独立的吧，每种效果有自己的prefab


    /*
     * 额，重新整理一下这几个阶段的顺序
     * 回合开始>Preapare>buff生效（可）>蓄力/集气（可）>goFront>cast>castEnd>turnEnd
     */

	 考虑加个缓冲池，主要针对的问题是 多效果同角色同时出
	 1.‘同时’这个问题交给缓冲池来解决，设置一个延时机制，interval，避免同时出来就好
	 2.只有‘同角色’才需要处理这个问题
	 3.虽然说是多效果，但处于不同位置的多效果应该可以同时播放
	 4.总结3、4，也就是说，只有同时出现在同角色的同位置的多效果才需要缓冲处理。
	 
	 
	 so...这边需要一个能Update的地方（计时）；一个封装各数据的对象；以及一个数组
	 －能够Update的地方：ClientSkill——目前所有效果都由Skill调用

	 hold on，由于之前方案的限制，这边需要调整下策略
	 原来由skill创建各种效果，然后在创建效果的同时调用globalEffect
	 但现在的问题是globalEffectManager不具备update功能，而只有manager才会指定部位。

	 因此这边需要考虑增加一个GlobalEffectPlayer对象，具备Update，并负责管理和真正创建globalEffect
	 然后Manager向Player发请求，Player受到请求后判断是否CreateClonedEffect


关于individual型技能的改造，主要目的是强化打击感，让特效的节奏和种类不那么单调
其核心说白了很简单，就是：
1.能够控制技能打到目标身上的反应。

因此要做的事情就是，设计一个对象，上面可以设置一些时间段，然后在指定的时间段调text
按目前的ClientSkill设计，把其中解析SkillTargetData的部分修改一下




额...行动条移动思路：
先确认需求，一共有三种移动方式
1.消失>消失腾出空位
2.移动>移动补上空位
3.插入>插入创造空位，并影响后面



加一个对象吧...省的到时候倒来倒去弄乱了
class XXXX
{
Item item;
vector3 currentPos;
vector3 newPos;
bool needRemove;
}

void Move(int oldIndex,int newIndex)
{
 XXXX x = new XXXX();
 x.item=myItem[oldIndex];
 x.currentPos = myItems[oldIndex].Position;
 x.newPos = myItems[newIndex].Position;
 
}


void Remove(int index)
{
XXXX x = new XXXX();

}

void Slash()
{
	Move(2,1);
	Remove(0);
	Move(1,0);
	Move(4,2);
}


        /*
         * 
         * 角色行动前1
         * －空,a,b,c,d,(e),(f),(g)   ——由于考虑到角色速度会变，因此参考的值应根据角色行动后的值发生变化
         * 
         * 角色行动前2
         * －a,b,c,d,e
         * 角色行动时
         * －a,b,c,d,e（a把c灭掉了，并把d滞后至e）
         * 角色行动后1
         * －a，b，空，空，e，(d)，(f)，(g)
         * 角色行动后2
         * －a，b，e，d，f，(g)
         * 角色行动后3（a速度快，还能接着行动一轮，排至b前）
         * －空，a，b，e，d，(f)，(g)
         */



		 其实最后可以考虑获得nextTurnData的实际行动顺序来计算变化
		 因为根据ap&speed算waitingForGO毕竟比较麻烦
		 //NONONO！
		 //还是得算waitingForGO，nextTurn只能得到下回合的ap和speed
		 //ap&speed高不代表下回合就能行动，可能会等到好几回合之后才能动
		 //所以还得依赖于waitingForGO来排序

		 ServerCharacterSpeed——角色速度相关的服务器数据，记录用

		 MockCharacterData——角色数据的同步数据，manager管理和使用的内存数据，可以用来排序、检索
		 
		 OrderData——用于比较角色行动顺序的内存数据，主要是存charId和waitingForGo

		 list1 a 
		 list0 a b c d
		 max=5; n=4-1=3
		 i+0
		 if(list1.count< math.min(list0.count ,max))


		 整理下思路：
		 loading 界面负责等待JSoN(for Combat），并负责把此数据传给CombatScene
		 CombatScene负责调用对应资源并赋值
		 loading界面还负责提供一张图（幕帘），等CombatScene初始化好资源之后，将这张图撤掉
		 两个界面之间的通讯，通过改变MainGame中的状态来协调


		 class loading
		 {
		 void Start()
		 {
		 //创建这张图
		 //没了
		 }

		 void Update()
		 {

		 }
		 }


		 class 图
		 {
		 void Update()
		 {
		 if(MainGame.xxx == xx)
		 {
		 GameObject.Destroy(this.gameObject);
		 }
		 }
		 }

		 class CombatDataReceiver
		 {
		 void Start()
		 {
		 //不变
		 if(...所需的本地资源都到位）
		 {
		 MainGame.xxx=xx;
		 //Go!
		 }
		 }

		 void Update()
		 {
		 //不变
		 }
		 }



		 关于BuffIcon的设计方案
		 两步工作：
		 1.设计管理buff图标显示、关闭的Controller，由Character调用
		 2.给Character增加对应的状态，由GlobalEffectMananger通知character改变状态

